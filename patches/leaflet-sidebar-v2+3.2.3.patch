diff --git a/node_modules/leaflet-sidebar-v2/js/leaflet-sidebar.js b/node_modules/leaflet-sidebar-v2/js/leaflet-sidebar.js
index 4b5805a..608133b 100644
--- a/node_modules/leaflet-sidebar-v2/js/leaflet-sidebar.js
+++ b/node_modules/leaflet-sidebar-v2/js/leaflet-sidebar.js
@@ -11,7 +11,7 @@
  * @param {boolean} [data.close=true] Whether to add a close button to the pane header
  * @see L.control.sidebar
  */
-L.Control.Sidebar = L.Control.extend(/** @lends L.Control.Sidebar.prototype */ {
+L.Control.Sidebar = L.Control.extend( /** @lends L.Control.Sidebar.prototype */ {
     includes: L.Evented ? L.Evented.prototype : L.Mixin.Events,
 
     options: {
@@ -65,9 +65,9 @@ L.Control.Sidebar = L.Control.extend(/** @lends L.Control.Sidebar.prototype */ {
 
         // use the container given via options.
         if (!container) {
-            container = this._container || typeof this.options.container === 'string'
-            ? L.DomUtil.get(this.options.container)
-            : this.options.container;
+            container = this._container || typeof this.options.container === 'string' ?
+                L.DomUtil.get(this.options.container) :
+                this.options.container;
         }
 
         // if no container was specified or not found, create it and apply an ID
@@ -86,7 +86,7 @@ L.Control.Sidebar = L.Control.extend(/** @lends L.Control.Sidebar.prototype */ {
 
         // Find tabContainerTop & tabContainerBottom in DOM & store reference
         tabContainers = container.querySelectorAll('ul.leaflet-sidebar-tabs, div.leaflet-sidebar-tabs > ul');
-        this._tabContainerTop    = tabContainers[0] || null;
+        this._tabContainerTop = tabContainers[0] || null;
         this._tabContainerBottom = tabContainers[1] || null;
 
         // If no container was found, create it
@@ -145,7 +145,7 @@ L.Control.Sidebar = L.Control.extend(/** @lends L.Control.Sidebar.prototype */ {
      * @param {L.Map} map
      * @returns {Sidebar}
      */
-    onRemove: function (map) {
+    onRemove: function(map) {
         // Remove click listeners for tab & close buttons
         for (var i = 0; i < this._tabitems.length; i++)
             this._tabClick(this._tabitems[i], 'off');
@@ -164,7 +164,7 @@ L.Control.Sidebar = L.Control.extend(/** @lends L.Control.Sidebar.prototype */ {
      * Adds the control to the given map. Overrides the implementation of L.Control,
      * changing the DOM mount target from map._controlContainer.topleft to map._container
      */
-    addTo: function (map) {
+    addTo: function(map) {
         this.onRemove();
         this._map = map;
 
@@ -200,7 +200,7 @@ L.Control.Sidebar = L.Control.extend(/** @lends L.Control.Sidebar.prototype */ {
         return this;
     },
 
-   /**
+    /**
      * Open sidebar (if it's closed) and show the specified tab.
      *
      * @param {string} id - The ID of the tab to show (without the # character)
@@ -324,7 +324,7 @@ L.Control.Sidebar = L.Control.extend(/** @lends L.Control.Sidebar.prototype */ {
                 if (data.title)
                     content += '<h1 class="leaflet-sidebar-header">' + data.title;
                 if (this.options.closeButton)
-                    content += '<span class="leaflet-sidebar-close"><i class="fa fa-caret-' + this.options.position + '"></i></span>';
+                    content += '<span class="leaflet-sidebar-close"><i data-feather="x"></i></span>';
                 if (data.title)
                     content += '</h1>';
                 pane.innerHTML = content + data.pane;
@@ -498,14 +498,14 @@ L.Control.Sidebar = L.Control.extend(/** @lends L.Control.Sidebar.prototype */ {
      *
      * @param {String} [openClose] The behaviour to enact ('open' | 'close')
      */
-   _panMap: function(openClose) {
+    _panMap: function(openClose) {
         var panWidth = Number.parseInt(L.DomUtil.getStyle(this._container, 'max-width')) / 2;
         if (
             openClose === 'open' && this.options.position === 'left' ||
             openClose === 'close' && this.options.position === 'right'
         ) panWidth *= -1;
         this._map.panBy([panWidth, 0], { duration: 0.5 });
-   }
+    }
 });
 
 /**
